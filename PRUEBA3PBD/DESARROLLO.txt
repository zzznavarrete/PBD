--******************PROCEDIMIENTOS****************************
/*•	Generar un procedimiento que permita actualizar la situación en aprobado o reprobado dependiendo del siguiente criterio mayor a 40 aprobado de lo contrario reprobado.*/
SELECT * FROM CURSOS;
CREATE OR REPLACE PROCEDURE PS_APROBADO
IS 
  CURSOR C_CURSO 
              IS
              SELECT * FROM CURSOS;
  REG_CURSO C_CURSO%ROWTYPE;
BEGIN
OPEN C_CURSO;
LOOP
    FETCH C_CURSO INTO REG_CURSO;
    EXIT WHEN C_CURSO%NOTFOUND;
    IF REG_CURSO.NOTA>=40 THEN
      UPDATE CURSOS SET SITUACION='APROBADO' WHERE IDCURSO=REG_CURSO.IDCURSO;
      DBMS_OUTPUT.PUT_LINE(REG_CURSO.IDCURSO||' APROBADO');
      ELSE
      UPDATE CURSOS SET SITUACION='REPROBADO' WHERE IDCURSO=REG_CURSO.IDCURSO;
      DBMS_OUTPUT.PUT_LINE(REG_CURSO.IDCURSO||' REPROBADO');
    END IF;
  END LOOP;
CLOSE C_CURSO;
END;
EXECUTE PS_APROBADO;
/*•	•	Generar un procedimiento que permita rellenar el campo asignatura en la tabla cursos dependiendo de la asignatura del profesor a cargo.*/
SELECT * FROM PROFESORES;
SELECT * FROM CURSOS;
CREATE OR REPLACE PROCEDURE PS_RELLENAR_ASIGNATURA
IS 
   CURSOR C_CURSO 
              IS
              SELECT * FROM CURSOS;
    REG_CURSO C_CURSO%ROWTYPE;
    V_ASIG VARCHAR(30);
BEGIN
OPEN C_CURSO;
LOOP
    FETCH C_CURSO INTO REG_CURSO;
    EXIT WHEN C_CURSO%NOTFOUND;
    SELECT ASIGNATURA INTO V_ASIG FROM PROFESORES WHERE IDPROFESOR=REG_CURSO.IDPROFESOR;
    UPDATE CURSOS SET ASIGNATURA=V_ASIG WHERE IDCURSO=REG_CURSO.IDCURSO;
  END LOOP;
CLOSE C_CURSO;
END;
EXECUTE PS_RELLENAR_ASIGNATURA;
/*•	Generar un procedimiento que permita listar todos los cursos realizados por un alumno en especial.*/
SELECT * FROM CURSOS WHERE IDALUMNO=1;
CREATE OR REPLACE PROCEDURE PS_LISTAR_CURSOS (P_ID_ALUMNO NUMBER)
IS
  CURSOR C_ALUMNO
        IS SELECT * FROM CURSOS WHERE IDALUMNO=P_ID_ALUMNO;
  REG_ALUMNO C_ALUMNO%ROWTYPE;
  V_NOM VARCHAR(60);
BEGIN
OPEN C_ALUMNO;
LOOP
    FETCH C_ALUMNO INTO REG_ALUMNO;
    EXIT WHEN C_ALUMNO%NOTFOUND;
    SELECT NOMBRE INTO V_NOM FROM ALUMNOS WHERE IDALUMNO=REG_ALUMNO.IDALUMNO;
    DBMS_OUTPUT.PUT_LINE(RPAD(V_NOM,15)||RPAD(REG_ALUMNO.ASIGNATURA,15)||RPAD(REG_ALUMNO.NOTA,5)||RPAD(REG_ALUMNO.SITUACION,13));
  END LOOP;
CLOSE C_ALUMNO;
END;
EXECUTE PS_LISTAR_CURSOS(1);
/*•	Generar un procedimiento  que permita modificar la nota de un alumno en un curso en especial.*/
SELECT * FROM CURSOS WHERE IDALUMNO=1 AND IDCURSO=1;
CREATE OR REPLACE PROCEDURE PS_CAMBIAR_NOTA (P_ID_ALUMNO NUMBER,P_CURSO NUMBER,P_NOTA NUMBER)
IS
  CURSOR C_ALUMNO
        IS SELECT * FROM CURSOS WHERE IDALUMNO=P_ID_ALUMNO AND IDCURSO=P_CURSO;
  REG_ALUMNO C_ALUMNO%ROWTYPE;
  V_NOM VARCHAR(60);
BEGIN
OPEN C_ALUMNO;
LOOP
    FETCH C_ALUMNO INTO REG_ALUMNO;
    EXIT WHEN C_ALUMNO%NOTFOUND;
    UPDATE CURSOS SET NOTA=P_NOTA WHERE IDALUMNO=REG_ALUMNO.IDALUMNO  ;
  END LOOP;
CLOSE C_ALUMNO;
END;
EXECUTE PS_CAMBIAR_NOTA(1,1,32);
/*•	Crear un procedimiento que presente organizado por asignatura los nombres y rut de los alumnos.*/

SELECT NOMBRE,RUT,ASIGNATURA FROM ALUMNOS JOIN CURSOS USING(IDALUMNO) ORDER BY ASIGNATURA ASC;
SELECT NOMBRE,RUT,ASIGNATURA FROM ALUMNOS JOIN CURSOS USING(IDALUMNO) ORDER BY ASIGNATURA ASC;
CREATE OR REPLACE PROCEDURE PS_LISTARALUMNOSPORASIGNATURA
IS 
  CURSOR C_ALUMNOS IS
          SELECT NOMBRE,RUT,ASIGNATURA FROM ALUMNOS JOIN CURSOS USING(IDALUMNO) ORDER BY ASIGNATURA ASC;
  REG_ALUMNOS C_ALUMNOS%ROWTYPE;
BEGIN
OPEN C_ALUMNOS;
DBMS_OUTPUT.PUT_LINE ('************LISTADO ALUMNOS ORGANIZADO POR ASIGNATURA***********************'); 
DBMS_OUTPUT.PUT_LINE (RPAD('REGISTRO ',10)||RPAD('NOMBRE',20)||RPAD('RUT',20));
  LOOP
      FETCH C_ALUMNOS INTO REG_ALUMNOS;
      EXIT WHEN C_ALUMNOS%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE (RPAD(C_ALUMNOS%ROWCOUNT,10)||RPAD(REG_ALUMNOS.NOMBRE,20)||RPAD(REG_ALUMNOS.RUT,20)); 
    END LOOP;
CLOSE C_ALUMNOS;
END;
EXECUTE PS_LISTARALUMNOSPORASIGNATURA;
--*********************FUNCIONES**********************
/*•	Crear una función que presente el texto mayor o menor dependiendo de la edad.*/
CREATE OR REPLACE FUNCTION FN_EDAD(P_ID NUMBER) RETURN VARCHAR 
IS 
  V_EDAD NUMBER(9):=0;
  V_MENSAJE VARCHAR(30);
BEGIN
      SELECT EDAD INTO V_EDAD FROM ALUMNOS WHERE IDALUMNO=P_ID;
        IF V_EDAD>18 THEN
          V_MENSAJE:='MAYOR';
          ELSE
          V_MENSAJE:='MENOR';
        END IF;
RETURN V_MENSAJE;
END FN_EDAD;
SELECT IDALUMNO,NOMBRE,RUT,EDAD,FN_EDAD(IDALUMNO) FROM ALUMNOS;
/*•	Crear una función que presente la cantidad de cursos que realiza un alumno en especial con tan solo ingresar su rut*/
SELECT * FROM CURSOS;
SELECT IDALUMNO,COUNT(IDALUMNO) FROM CURSOS JOIN ALUMNOS USING(IDALUMNO) GROUP BY IDALUMNO;
CREATE OR REPLACE FUNCTION FN_RUT(P_RUT VARCHAR2) RETURN VARCHAR 
IS 
  V_CANTIDAD NUMBER(10):=0;
BEGIN
      SELECT NVL(COUNT(IDALUMNO),0) INTO V_CANTIDAD FROM CURSOS  JOIN ALUMNOS USING(IDALUMNO)WHERE RUT=P_RUT GROUP BY IDALUMNO;
      RETURN V_CANTIDAD;
END FN_RUT;
SELECT NOMBRE,RUT,FN_RUT(RUT) FROM ALUMNOS;
/*•	Crear una función que devuelva el numero de alumnos inscritos por curso (ingrese el código del curso)*/
SELECT ASIGNATURA,COUNT(IDALUMNO) FROM ALUMNOS JOIN CURSOS USING(IDALUMNO) GROUP BY ASIGNATURA;
//otra wea xd
CREATE OR REPLACE FUNCTION FN_CANTIDAD_POR_ASIGNATURA(P_ASIG VARCHAR) RETURN NUMBER
IS
    V_CANTIDAD NUMBER(8):=0;
BEGIN
    SELECT COUNT(IDALUMNO) INTO V_CANTIDAD FROM ALUMNOS JOIN CURSOS USING(IDALUMNO) WHERE ASIGNATURA=P_ASIG GROUP BY ASIGNATURA;
    RETURN V_CANTIDAD;
END FN_CANTIDAD_POR_ASIGNATURA;
SELECT ASIGNATURA,FN_CANTIDAD_POR_ASIGNATURA(ASIGNATURA) FROM PROFESORES;